This contains code for building register form with validation


Important Points:

1) First point here...


--- FORM STRUCTURE & STYLING START ---

1) Each form input should have a unique ID which should be used as the label's for attribute
2) The label and input/textarea should be put inside a wrapper div of class .form__group
3) To properly style the inputs & textareas, give them the .form__control class
4) The .form__control class ensures that they all have a width of 100%
5) On the :focus pseudo-class of the .form__control class, you can also apply some shadow 
6) This is totally optional, and helps the input to stand out when the user clicks on it
7) IMPORTANT: Don't style the input elements directly, otherwise the styling will also apply 
   to other inputs which aren't part of the form! Use the .form__control class instead!
8) The entire form shoud be placed inside a parent div whose width is set as a percentage
9) This parent div controls the size of the form
10) For best appearance, this parent div should have a background colour (eg. #F2F2F2), and some
    padding (2rem) & border radius (.5rem)
11) For a more uniform look, give the button the same border radius that the .form__control class
    has

--- FORM STRUCTURE & STYLING END ---


--- VALIDATION ICONS START ---

1) There are two different validation icons, one for success and one for error
2) They should both be wrapped with a span of class .form__icon-box
3) The .form__icon-box should be absolutely positioned relative to the div of class .form__group
4) The div of class .form__group should be given the .form__group--validation-icon-ref modifier class
5) This modifier should then be set to position: relative
6) The icons should be positioned inside the input field on the far right

--- VALIDATION ICONS END ---


--- CUSTOM RADIO BUTTONS START ---

1) There's no way of styling a radio button directly in CSS
2) So, you should set it to display: none
3) This hides the default appearance of the radio button
4) After hiding the default radio button, we'll then create our own custom design
5) We'll do it by adding a span tag without any content between the label tags
6) So, we'll hide the default radio button and then the span element will our custom button instead
   - that's the trick
7) The custom radio button is actually made of two parts
8) The first part is the circular border, and the second part is the dot which appears when the radio 
   button has been checked
9) Therefore, we can either have an empty radio button (initial state) or a radio button with the dot 
   (checked state)

--- CUSTOM RADIO BUTTONS END ---