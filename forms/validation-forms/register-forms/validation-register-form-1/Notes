This contains code for building register form with validation


Important Points:

1) First point here...


--- FORM STRUCTURE & STYLING START ---

1) Each form input should have a unique ID which should be used as the label's for attribute
2) The label and input/textarea should be put inside a wrapper div of class .form__group
3) To properly style the inputs & textareas, give them the .form__control class
4) The .form__control class ensures that they all have a width of 100%
5) On the :focus pseudo-class of the .form__control class, you can also apply some shadow 
6) This is totally optional, and helps the input to stand out when the user clicks on it
7) IMPORTANT: Don't style the input elements directly, otherwise the styling will also apply 
   to other inputs which aren't part of the form! Use the .form__control class instead!
8) The entire form shoud be placed inside a parent div whose width is set as a percentage
9) This parent div controls the size of the form
10) For best appearance, this parent div should have a background colour (eg. #F2F2F2), and some
    padding (2rem) & border radius (.5rem)
11) For a more uniform look, give the button the same border radius that the .form__control class
    has

--- FORM STRUCTURE & STYLING END ---


--- VALIDATION ICONS START ---

1) There are two different validation icons, one for success and one for error
2) They should both be wrapped with a span of class .form__icon-box
3) The .form__icon-box should be absolutely positioned relative to the div of class .form__group
4) The div of class .form__group should be given the .form__group--validation-icon-ref modifier class
5) This modifier should then be set to position: relative
6) The icons should be positioned inside the input field on the far right

--- VALIDATION ICONS END ---


--- CUSTOM RADIO BUTTONS START ---

1) There's no way of styling a radio button directly in CSS
2) So, you should set it to display: none
3) This hides the default appearance of the radio button
4) After hiding the default radio button, we'll then create our own custom design
5) We'll do it by adding a span tag without any content between the label tags
6) So, we'll hide the default radio button and then the span element will our custom button instead
   - that's the trick
7) When styling the label, give it a font size, then set cursor: pointer
8) Setting cursor: pointer makes the label text look like a link, possibly encouraging the user to 
   click
9) If the user clicks on the label text, the radio button should become checked automatically
10) This is because the label's for attribute value is the same as the input element's id attribute
11) The custom radio button is actually made of two parts
12) The first part is the circular border, and the second part is the dot which appears when the radio 
    button has been checked
13) Therefore, we can either have an empty radio button (initial state) or a radio button with the dot 
    (checked state)
14) The radio button dot is created with an ::after pseudo-element
15) The custom radio button (span) should have the same width & height
16) You should then give it a solid border with a fixed colour, and set border-radius: 50% to create 
    a perfect circle
17) You could set border-radius: 100% instead, but it's more common to set it to 50%
18) At this point, it's not going to look quite right
19) That's because the span is an inline element
20) So, for best practice, you should set it to display: inline-block
21) You could set it to display: block, but setting it to display: inline-block makes it occupy only
    the exact space it needs
22) To position the custom radio button, you should use absolute positioning
23) Now, for this to work, you should also set the parent element (label) to position: relative
24) Alternatively, you could just use Flexbox instead

25) The radio button dot is styled in a very similar way to the custom radio button
26) However, it has no border, and it should have a background colour
27) For best practice, the background colour should be similar to, or the same as the border colour
    of the custom radio button
28) The radio button dot should be positioned in the centre of the outer circle
29) To do this, you should use absolute positioning
30) Now, if the custom radio button is already set to position: absolute, then it'll be used as the
    reference to position the radio button dot
28) However, if you've chosen to position the custom radio button with Flexbox, then you need to set
    it to position: relative
29) Now, in the initial state, the radio button dot should be hidden (opacity: 0)
30) But every time the radio button is checked or the label is pressed, the radio button dot should 
    become visible again
31) For this, you should use the :checked pseudo-class which is available on all radio buttons which 
    are checked
32) However, you need to target the ::after pseudo-element of the custom radio button
33) Initially, we set opacity: 0 to hide the radio button dot
34) But now, you should set opacity: 1 to show the radio button dot
25) To make it look better, you should also use the transition property to animate the opacity 
    property
26) Now, when you click on the radio button or the label text itself, the button becomes selected and 
    the dot in the middle shows up
27) So, this custom radio button now replaces the default one, and has the exact same functionality
28) As a matter of fact, the default radio button will still get checked as well
29) So, this is how you build custom radio buttons
30) You can use the exact same technique for custom checkboxes too
31) Now, the last step is to actually hide the default radio button


    Pick up again from 16:44

--- CUSTOM RADIO BUTTONS END ---