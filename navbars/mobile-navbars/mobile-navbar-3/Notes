This contains code for building a mobile navigation menu


Important Points:

1) This code should only be used on small-screen devices
2) This navigation bar consist of two parts. The first part should be a Flex container
3) Use top and bottom padding to increase height of the first part, if necessary
4) The mobile navbar has been wrapped in a div with class .mobile-container. This is just to 
   simulate the width of a mobile device. Do not use it when building a website
5) The hamburger/toggle menu should only be visible on tablet & mobile devices


--- OVERLAY START ---

1) This navigation bar employs a full-screen overlay, which is opened when the user clicks on either 
   the hamburger or magnifying glass icon
2) For this to work, there are two different overlays
3) If the user clicks on the magnifying glass icon, it should open up the first overlay, which
   contains a search bar
4) But if they click on the hamburger icon, then it should open up the second overlay, which contains
   the menu items
5) The overlay should be positioned relative to the viewport using the position: fixed rule
6) But for this sample code, the overlay is absolutely positioned relative to the wrapper div
   with class .mobile-container
7) This is to allow you see what it would look like on a small-screen device
8) IMPORTANT: When using this mobile navbar, remove the wrapper div of class .mobile-container
   and set the overlay to position: fixed!
9) All the contents of the navigation bar should be placed inside a div of class .mobilenav__overlay,
   whose width is initially set to 0
10) The overlay should also be given a unique ID in order to target it with JavaScript 
11) It's also important that you DON'T apply any padding to the overlay. Since its width is initially
    set to zero, any padding will cause the overlay to just out slightly when it's closed
12) The logo and close icon should be placed in a separate div within the overlay
13) This wrapper div is of class .mobilenav__logo-closebtn-box and should be a flex container
14) Give this div a fixed padding (eg. 1.5rem) to prevent the logo and icon being too close to the
    egde of the viewport

--- OVERLAY END ---


--- OVERLAY SEARCH BAR START ---

1) For the search bar, it's better not to have a button as it takes up more space, which isn't the
   best experience on a small-screen device
2) The search bar itself also has a magnifying glass icon on the left
3) But for this icon to appear on top of the input, use the z-index property
4) The search bar icon should also be inside the input field as well
5) For this, you basically have two options
6) The first option is to use a negative value for the margin-left property on the input element.
   However, this causes the input to move to the left
7) The second option is to use absolute positioning to position the icon on the left of the input 
   relative to the search bar (position: relative)
8) The second option is preferred as it doesn't cause the input to be shifted to the left
9) For best aestetic appearance, the input should have the same background colour as the overlay. 
   In addition, also apply a little bottom border to make the input field stand out more


--- OVERLAY SEARCH BAR END ---


--- ACCORDION START ---

1) The menu links are an accordion, and should open up a list of sub-items when the user clicks
   on it
2) Put the accordion inside a parent div of class .mobilenav__accordion-box
3) This div along with the one of class .mobilenav__logo-closebtn-box are the direct children
   of the overlay div
4) To prevent the contents getting too close to the edge of the screen, give both of them the same
   amount of padding (eg. 1.5rem)
5) You should also apply this same padding to the first part of the navigation bar as well
6) This is kept within the div of class .mobilenav
7) Doing this puts the logo and hamaburger icon in the same position as they are in the overlay
8) The accordion consists of full-width buttons, which display content when the user click on them
9) The content is kept within a div of class .mobilenav__accordion-panel which is hidden by default 
10) This content is then made visible by adding an .active class using JavaScript
11) Each button will have a plus (+) icon, which then changes to a minus (-) icon when the user clicks
    on it

--- ADDING ICONS START ---

12) To add the icon, there are two strategies   
13) With the first strategy, the icons are added using HTML Entities on an ::after pseudo-element
14) Now, to position the icons, you can either use the float property or Flexbox (preferred)
15) The only problem is that for some reason, CSS won't allow me to change the colour of the 
    HTML Entity
16) The second strategy involves including an SVG icon directly in CSS
17) The SVG will either be added as a background image (older browsers) or using CSS masks 
    (newer browsers). A feature query will allow the browser decide how the SVG should be added
18) Using CSS masks only works on newer browsers, and allows the colour to be changed easily. 
    On older browsers, the colour can't be changed since the SVG is added as a background image
19) The second strategy is the preferred one. However, you can't use the float propery to position
    the icon - it simply doesn't work. You have to use Flexbox instead
20) To make the accordion dropdown smoother, you can use an animated version of this instead
21) Remove the display: none rule from the .accordion__panel class, and use the alternative styles
    and JavaScript provided
    
22) Now, each sub-item should also be an accordion itself, which then opens up a list of links
23) Each sub-item should have a right triangle icon before it
24) The triangle icons are added using SVGs on a ::before pseudo-element
25) Opposite the sub-item, there will be a plus (+) icon, which then changes to a minus (-) icon when 
    the user clicks on it
26) To add the icon, there are two strategies   
27) With the first strategy, the icons are added using HTML Entities on an ::after pseudo-element
28) Now, to position the icons, you can either use the float property or Flexbox (preferred)
29) The only problem is that for some reason, CSS won't allow me to change the colour of the 
    HTML Entity
30) The second strategy involves including an SVG icon directly in CSS
31) The SVG will either be added as a background image (older browsers) or using CSS masks 
    (newer browsers). A feature query will allow the browser decide how the SVG should be added
32) Using CSS masks only works on newer browsers, and allows the colour to be changed easily. 
    On older browsers, the colour can't be changed since the SVG is added as a background image
33) The second strategy is the preferred one. However, you can't use the float propery to position
    the icon - it simply doesn't work. You have to use Flexbox instead   

--- ADDING ICONS END ---

34) Both the sub-item and the icon are kept in a parent div of class .mobilenav__accordion-text-icon-box
35) This parent div is a Flex container, and should be used to position the icon and sub-item
    opposite each other
36) For better aestetics, all the menu links (accordion) and sub-items, except the last one, should 
    be given a top border
37) Similarly, the links, which are opened by clicking on the sub-items, should all have a bottom
    border
38) For the JavaScript to work, you must give the icon opposite each sub-item a unique class
39) You must also give each link list its own unique class too
40) Once again, each sub-item should open up a list of links when the user clicks on it
41) Give EVERY SINGLE icon opposite each sub-item, and EVERY SINGLE link list its own unique class!

--- ACCORDION END ---


--- FINAL POINTS ---

1) For the icons, you need an 'arrow-right' (triangle), 'magnifying glass', 'add', 'clear' & 'remove' 
   icon. 
2) You can also use an icon for the hamburger menu, if you want. Alternatively, you can just build 
   the hamburger menu icon using divs as demonstrated here. Use SVG always!
3) Feel free to modify this mobile navigation to suit your needs
4) To see what this mobile navbar looks like, look at the photos in the 'previews' folder under 
   'images'
