This contains code for building a mobile navigation menu


Important Points:

1) This code should only be used on small-screen devices
2) This navigation bar consist of two parts. The first part should be a Flex container
3) Use top and bottom padding to increase height of the first part, if necessary
4) The mobile navbar has been wrapped in a div with class .mobile-container. This is just to 
   simulate the width of a mobile device. Do not use it when building a website
5) The hamburger/toggle menu should only be visible on tablet & mobile devices


--- FIRST OVERLAY START ---

1) This navigation bar employs a full-screen overlay, which is opened when the user clicks on the 
   magnifying glass icon
2) The overlay should be positioned relative to the viewport using the position: fixed rule
3) But for this sample code, the overlay is absolutely positioned relative to the wrapper div
   with class .mobile-container
4) This is to allow you see what it would look like on a small-screen device
5) IMPORTANT: When using this mobile navbar, remove the wrapper div of class .mobile-container
   and set the overlay to position: fixed!
6) All the contents of the navigation bar should be placed inside a div of class .mobilenav__overlay-1,
   whose width is initially set to 0
7) The overlay should also be given a unique ID in order to target it with JavaScript 
8) It's also important that you DON'T apply any padding to the overlay. Since its width is initially
   set to zero, any padding will cause the overlay to just out slightly when it's closed
9) The search bar and close icon should be placed in a separate div within the overlay
10) This wrapper div is of class .mobilenav__form-closebtn-box and should be a flex container
11) Give this div a fixed padding (eg. 1.5rem) to prevent the logo and icon being too close to the
    egde of the viewport
12) However, on this occasion, you should remove the padding to allow the search bar touch both the
    left and right sides of the overlay

--- FIRST OVERLAY END ---


--- SECOND OVERLAY START ---

1) This navigation bar employs a full-screen overlay (.mobilenav__overlay-2), which is opened 
   when the user clicks on the hamburger icon
2) The overlay should be positioned relative to the viewport using the position: fixed rule
3) But for this sample code, the overlay is absolutely positioned relative to the wrapper div
   with class .mobile-container
4) This is to allow you see what it would look like on a small-screen device
5) IMPORTANT: When using this mobile navbar, remove the wrapper div of class .mobile-container
   and set the overlay to position: fixed!
6) All the contents of the navigation bar should be placed inside a div of class 
   .mobilenav__overlay-2-content-box, whose width is set to 25rem
7) For the div of class .mobilenav__overlay-2-content-box, the x-axis overflow should be set to 
   hidden, and the y-axis overflow set to scroll
8) This shows the y-axis scroll bar and hides the x-axis scroll bar
9) The div with class .mobilenav__overlay-2-content-box should also be absolutely positioned 
   relative to overlay (.mobilenav__overlay-2)
10) The div with class .mobilenav__overlay-2-content-box should also have a fixed height (eg. 54rem).
    This is required for the overflow-y: scroll rule to work
11) The actual contents of the overlay will be kept in separate divs (eg .mobilenav__content-box-1) 
    that each have a specific amount of bottom border 

--- SECOND OVERLAY END ---


--- CLOSE ICON START ---

1) The close icon is used on all overlays except the first one
2) Use absolute positioning to put it outside the sidebar (eg .mobilenav__overlay-2-content-box) 
   which has a fixed width
2) In your HTML, the close icon should be positioned inside the overlay (eg. .mobilenav__overlay-2),
   but outside the sidebar (.mobilenav__overlay-2-content-box)
3) The close icon should be absolutely positioned relative to the overlay (.mobilenav__overlay-2),
   and placed outside the sidebar
4) For best practice, the icon should be enclosed with a white circle (.mobilenav__closebtn-box-1)
   to help it stand out form the dark overlay

--- CLOSE ICON END ---


--- SEARCH BAR DROPDOWN START ---

1) The form (.mobilenav__search) should be a flex item whose width is set relative to its parent
2) The form itself is also a flex container width two child elements
3) The first child is a div (.mobilenav__search-input-dropdown-box) containing the input and dropdown
4) The second child is the button (.mobilenav__search-button)
5) However, on this occasion, the button should be removed and the search bar shoudl span the full 
   width of the overlay
6) The input element has a parent of class .mobilenav__search-input-box. This should then be given 
   some padding (eg. 1.2rem) to create extra space around the input field. It also serves to create
   space between the input & dropdown contents


5) For the magnifying glass icon to actually show up on the left side of the input, there are three
   strategies you can use
6) For the first strategy, you use the SVG element on its own, and then apply a negative left margin
   to the input (.mobilenav__search-input)
7) Now, to compensate for the negative left margin placed on the input, you must also apply a 
   NEGATIVE translateX() of the same value to the button
8) The problem with this technique is that since the input is shifted left, it's VERY difficult to 
   make the dropdown perfectly aligned on its left
9) For the second strategy, wrap the SVG element in a button and then use the translateX() function
   to position the icon on top of the input
10) The problem with this strategy is that it leaves a space on the left, meaning that the dropdown
    won't be perfectly aligned on its left 
11) For the third strategy, set the input's parent to position: relative, then use absolute
    positioning to put the icon on the left side of the input
12) The input's parent should be a flex container set to align-items: center. Therefore all its 
    children will be vertically centred
13) The third strategy is the best, and is what you should stick with at all times
14) Sometimes, you might want the search bar to expand slightly when the user focuses on it
15) This is totally optional, but there's no way of doing it directly in CSS that I'm aware of.
    So, you need to use JavaScript to add this functionality
16) If you want the search bar to expand when it's focused on, then the dropdown below should also
    expand. Once again, you do this using JavaScript
17) You can use any element to open the dropdown (eg. <button>, <a> or <p> element)
18) Use a container element like a <div> to create the dropdown menu and put the dropdown links 
    inside it
19) The width of the dropdown is controlled by the min-width property
20) The min-width of the dropdown menu has been set to 28.3rem. Feel free to change this if necessary
21) The dropdown menu should be absolutely positioned relative to the search bar (.mobilenav__search)
22) Apply box-shadow to dropdown menu to create "card" effect
23) The dropdown menu is displayed when the user starts typing in the search bar
24) The dropdown menu links should be given a smaller left padding to keep them left-aligned
25) If nothing is found, then an alternative dropdown is displayed, notifying the user accordingly
26) The height of the search bar is determined by the top- and bottom padding applied to the input 
    element. Apply the align-self: stretch rule to the button, so it occupies the full height of 
    the search bar

--- SEARCH BAR DROPDOWN END ---


--- MODAL START ---

1) There's a modal which allows the user choose which langauge the page should be displayed in
2) This modal opens up when the user clicks on the trigger button (.mobilenav__languages-button)
   in the second overlay
2) The modal has a fixed width of 60rem, which is set on the modal dialog (.mobilenav__modal-dialog)
3) This ensures that the modal width always remains the same, regardless of the number of languages
   being displayed

--- MODAL END ---