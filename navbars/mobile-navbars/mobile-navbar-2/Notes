This contains code for building a mobile navigation menu


Important Points:

1) This code should only be used on small-screen devices
2) This navigation bar consist of two parts. The first part should be a Flex container
3) Use top and bottom padding to increase height of the first part, if necessary
4) The mobile navbar has been wrapped in a div with class .mobile-container. This is just to 
   simulate the width of a mobile device. Do not use it when building a website
5) The hamburger/toggle menu should only be visible on tablet & mobile devices


--- FIRST OVERLAY START ---

1) This navigation bar employs a full-screen overlay, which is opened when the user clicks on the 
   magnifying glass icon
2) There are three ways in which the overlay can open. It can either slide in from the side, 
   slide down from top or open up without any animation at all
3) Although they all work, it's best to avoid sliding in from the top
4) This is because it can be a bit bumpy due to the scroll bar that appears on the right side
5) For your own projects, stick with either sliding in from the side or opening up without any 
   animation
6) The overlay should be positioned relative to the viewport using the position: fixed rule
7) But for this sample code, the overlay is absolutely positioned relative to the wrapper div
   with class .mobile-container
8) This is to allow you see what it would look like on a small-screen device
9) IMPORTANT: When using this mobile navbar, remove the wrapper div of class .mobile-container
   and set the overlay to position: fixed!
10) All the contents of the navigation bar should be placed inside a div of class .mobilenav__overlay-1,
    whose width is initially set to 0
11) The overlay should also be given a unique ID in order to target it with JavaScript 
12) It's also important that you DON'T apply any padding to the overlay. Since its width is initially
    set to zero, any padding will cause the overlay to poke out slightly when it's closed 
13) The search bar and close icon should be placed in a separate div within the overlay
14) This wrapper div is of class .mobilenav__form-closebtn-box and should be a flex container
15) Give this div a fixed padding (eg. 1.5rem) to prevent the logo and icon being too close to the
    egde of the viewport

--- FIRST OVERLAY END ---


--- SEARCH BAR START ---

1) The form (.mobilenav__search) should be a flex item whose width is set relative to its parent
2) The form itself is also a flex container width two child elements
3) The first child is a div (.mobilenav__search-input-dropdown-box) containing the input and dropdown
4) The second child is the button (.mobilenav__search-button)
5) For the magnifying glass icon to actually show up on the left side of the input, there are three
   strategies you can use
6) For the first strategy, you use the SVG element on its own, and then apply a negative left margin
   to the input (.mobilenav__search-input)
7) Now, to compensate for the negative left margin placed on the input, you must also apply a 
   NEGATIVE translateX() of the same value to the button
8) The problem with this technique is that since the input is shifted left, it's VERY difficult to 
   make the dropdown perfectly aligned on its left
9) For the second strategy, wrap the SVG element in a button and then use the translateX() function
   to position the icon on top of the input
10) The problem with this strategy is that it leaves a space on the left, meaning that the dropdown
    won't be perfectly aligned on its left 
11) For the third strategy, set the input's parent to position: relative, then use absolute
    positioning to put the icon on the left side of the input
12) The input's parent should be a flex container set to align-items: center. Therefore all its 
    children will be vertically centred
13) The third strategy is the best, and is what you should stick with at all times
14) Sometimes, you might want the search bar to expand slightly when the user focuses on it
15) This is totally optional, but there's no way of doing it directly in CSS that I'm aware of.
    So, you need to use JavaScript to add this functionality
16) If you want the search bar to expand when it's focused on, then the dropdown below should also
    expand. Once again, you do this using JavaScript

--- SEARCH BAR END ---


--- SEARCH BAR DROPDOWN START ---

17) You can use any element to open the dropdown (eg. <button>, <a> or <p> element)
18) Use a container element like a <div> to create the dropdown menu and put the dropdown links 
    inside it
19) The width of the dropdown is controlled by the min-width property
20) The min-width of the dropdown menu has been set to 28.3rem. Feel free to change this if necessary
21) The dropdown menu should be absolutely positioned relative to the search bar (.mobilenav__search)
22) Apply box-shadow to dropdown menu to create "card" effect
23) The dropdown menu is displayed when the user starts typing in the search bar
24) The dropdown menu links should be given a smaller left padding to keep them left-aligned
25) If nothing is found, then an alternative dropdown is displayed, notifying the user accordingly
26) The height of the search bar is determined by the top- and bottom padding applied to the input 
    element. Apply the align-self: stretch rule to the button, so it occupies the full height of 
    the search bar

--- SEARCH BAR DROPDOWN END ---


--- SECOND OVERLAY START ---

1) This navigation bar employs a full-screen overlay, which is opened when the user clicks on the 
   hamburger icon
2) The overlay should be positioned relative to the viewport using the position: fixed rule
3) But for this sample code, the overlay is absolutely positioned relative to the wrapper div
   with class .mobile-container
4) This is to allow you see what it would look like on a small-screen device
5) IMPORTANT: When using this mobile navbar, remove the wrapper div of class .mobile-container
   and set the overlay to position: fixed!
6) All the contents of the navigation bar should be placed inside a div of class .mobilenav__overlay-2,
   whose width is initially set to 0
7) The overlay should also be given a unique ID in order to target it with JavaScript 
8) It's also important that you DON'T apply any padding to the overlay. Since its width is initially
   set to zero, any padding will cause the overlay to just out slightly when it's closed
9) The logo and close icon should be placed in a separate div within the overlay
10) This wrapper div is of class .mobilenav__logo-closebtn-box and should be a flex container
11) Give this div a fixed padding (eg. 1.5rem) to prevent the logo and icon being too close to the
    egde of the viewport

--- SECOND OVERLAY END ---


--- ACCORDION START ---

1) The menu links are an accordion, and should open up a list of sub-items when the user clicks
   on it
2) Put the accordion inside a parent div of class .mobilenav__accordion-box
3) This div along with the one of class .mobilenav__logo-closebtn-box are the direct children
   of the overlay div
4) To prevent the contents getting too close to the edge of the screen, give both of them the same
   amount of padding (eg. 1.5rem)
5) You should also apply this same padding to the first part of the navigation bar as well
6) This is kept within the div of class .mobilenav
7) Doing this puts the logo and hamaburger icon in the same position as they are in the overlay
8) The accordion consists of full-width buttons, which display content when the user click on them
9) The content is kept within a div of class .mobilenav__accordion-panel which is hidden by default 
10) This content is then made visible by adding an .active class using JavaScript
11) Each button will have a plus (+) icon, which then changes to a minus (-) icon when the user clicks
    on it
12) The icons are added using HTML Entities on an ::after pseudo-element
13) Now, to position the icons, you can either use the float property or Flexbox (preferred)
14) To make the accordion dropdown smoother, you can use an animated version of this instead
15) Remove the display: none rule from the .accordion__panel class, and use the alternative styles
    and JavaScript provided
16) Each sub-item should also be an accordion itself, which then opens up a list of links
17) Each sub-item should have a right triangle icon before it
18) The triangle icons are added using SVGs on a ::before pseudo-element
19) Opposite the sub-item, there will be a plus (+) icon, which then changes to a minus (-) icon when 
    the user clicks on it
20) Once again, the icons are added using HTML Entities on an ::after pseudo-element
21) Both the sub-item and the icon are kept in a parent div of class .mobilenav__accordion-text-icon-box
22) This parent div is a Flex container, and should be used to position the icon and sub-item
    opposite each other
23) For better aestetics, all the menu links (accordion) and sub-items, except the last one, should 
    be given a top border
24) Similarly, the links, which are opened by clicking on the sub-items, should all have a bottom
    border
25) For the JavaScript to work, you must give the icon opposite each sub-item a unique class
26) You must also give each link list its own unique class too
27) Once again, each sub-item should open up a list of links when the user clicks on it
28) Give EVERY SINGLE icon opposite each sub-item, and EVERY SINGLE link list its own unique class!

--- ACCORDION END ---


--- FINAL POINTS ---

1) For the icons, you need an 'arrow-right' icon and a 'clear' icon
2) You can also build the hamburger menu icon using divs as demonstrated here. However, it's more 
   difficult to change the sizing later on. So, for the hamburger icon, try to stick with SVGs!
3) However, if you want more precise control over the size of the hamburger icon, then build it 
   using divs. It only requires a bit more effort on your part
4) Feel free to modify this mobile navigation to suit your needs
5) To see what this mobile navbar looks like, look at the photos in the 'previews' folder under 
   'images'
