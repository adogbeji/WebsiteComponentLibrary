This contains code for building a responsive top navigation bar


Important Points:

1) This navigation bar consist of two parts. The first part is visible on dektop and large tablet 
   devices. It should be a Flex container. The second part is only visible on small-screen devices.
2) Use top and bottom padding to increase height of the first part, if necessary
3) Give the search bar input some more left padding to prevent text from overlapping icon

--- DOT ICON DROPDOWN START ---

1) When the viewport size starts to decrease, some of the links can be put in a dropdown menu
2) This feature is entirely optional, and best suited for when you have more than four links
3) Use a container element like a <div> to create the dropdown menu and put the dropdown links 
   inside it
4) The dropdown is opened by clicking on the three dots (...) icon
5) This icon should be wrapped in a span element set to display: none
6) The dropdown content is absolutely positioned relative to the navigation bar. Place the dropdown 
   directly underneath the navigation bar by setting it to top: 100%
7) The min-width of the dropdown menu has been set to 14.5rem. Feel free to change this if necessary
8) Apply box-shadow to dropdown menu to create "card" effect
9) By default, all the links are hidden. Choose a breakpoint at which to start showing the links
10) At this breakpoint, keep all the links hidden except the last one by setting it to display: block
11) At this breakpoint, you should also set the span surrounding the three dots (...) icon to 
    display: inline-block and display: flex
12) Setting it to display: inline-block makes it visible, and only occupying the space it needs.
13) The display: flex rule makes the icon vertically centered. You can also apply the 
    align-items: center rule too, but this is totally optional. display: flex is enough
14) Then at each successive breakpoint, reveal each link by setting it to display: block
15) At each breakpoint, you must also hide the corresponding link in the navigation bar!

--- DOT ICON DROPDOWN END ---


--- MAIN DROPDOWN START ---

1) You can use any element to open the dropdown (eg. <button>, <a> or <p> element)
2) Use a container element like a <div> to create the dropdown menu and put the dropdown links 
   inside it
3) The dropdown content is absolutely positioned relative to the navigation bar. Place the dropdown 
    directly underneath the navigation bar by setting it to top: 100%
4) The min-width of the dropdown menu has been set to 14.5rem. Feel free to change this if necessary
5) Apply box-shadow to dropdown menu to create "card" effect
6) Apply Flexbox to the button to vertically center dropdown icon & text
7) Alternatively, you can choose to display the dropdown when the user hovers over the button
8) In that case, remove the JavaScript and set dropdown content to display: block upon hover

--- MAIN DROPDOWN END ---


--- SEARCH DROPDOWN START ---

1) The form (.topnav__search) should be a flex item whose width is set relative to the navigation bar
2) The form itself is also a flex container width two child elements
3) The first child is a div (.topnav__search-input-dropdown-box) containing the input and dropdown
4) The second child is the button (.topnav__search-button)
5) For the magnifying glass icon to actually show up on the left side of the input, there are three
   strategies you can use
6) For the first strategy, you use the SVG element on its own, and then apply a negative left margin
   to the input (.topnav__search-input)
7) Now, to compensate for the negative left margin placed on the input, you must also apply a 
   NEGATIVE translateX() of the same value to the button
8) The problem with this technique is that since the input is shifted left, it's VERY difficult to 
   make the dropdown perfectly aligned on its left
9) For the second strategy, wrap the SVG element in a button and then use the translateX() function
   to position the icon on top of the input
10) The problem with this strategy is that it leaves a space on the left, meaning that the dropdown
    won't be perfectly aligned on its left 
11) For the third strategy, set the input's parent to position: relative, then use absolute
    positioning to put the icon on the left side of the input
12) The input's parent should be a flex container set to align-items: center. Therefore all its 
    children will be vertically centred
13) The third strategy is the best, and is what you should stick with at all times
14) Sometimes, you might want the search bar to expand slightly when the user focuses on it
15) This is totally optional, but there's no way of doing it directly in CSS that I'm aware of.
    So, you need to use JavaScript to add this functionality
16) If you want the search bar to expand when it's focused on, then the dropdown below should also
    expand. Once again, you do this using JavaScript
17) You can use any element to open the dropdown (eg. <button>, <a> or <p> element)
18) Use a container element like a <div> to create the dropdown menu and put the dropdown links 
    inside it
19) The width of the dropdown is controlled by the min-width property
20) The min-width of the dropdown menu has been set to 41rem. Feel free to change this if necessary
21) The dropdown menu should be absolutely positioned relative to the search bar (.topnav__search)
22) Apply box-shadow to dropdown menu to create "card" effect
23) The dropdown menu is displayed when the user starts typing in the search bar
24) The dropdown menu links should be given a smaller left padding to keep them left-aligned
25) The height of the search bar is determined by the top- and bottom padding applied to the input 
    element. Apply the align-self: stretch rule to the button, so it occupies the full height of 
    the search bar

--- SEARCH BAR DROPDOWN END ---


--- MOBILE NAVBAR START ---

1) The mobile navbar is the second part of the navigation bar. It has been wrapped in a nav element 
   with class 'topnav-mobilenav'
2) Choose a breakpoint at which to hide the top navigation. At the same time, you should also make
   the mobile navbar visible
3) You should give the mobile navbar the same background colour you gave to the first part
4) Apply the overflow: hidden rule to the navigation bar. This prevents whitespace from appearing 
   on the right on smaller screens
5) Set the navigation bar to position: relative to position the hamburger icon
6) The hamburger/toggle menu should only be visible on tablet & mobile devices
7) All the menu links should be put inside a div with a unique ID to target it with JavaScript
8) Set menu links to display: block to allow them occupy full width of parent
9) Use left padding to create space between menu links & left side of viewport
10) Use a container element like a <div> to create the dropdown menu and put the dropdown links 
   inside it
11) The min-width of the dropdown menu has been set to 18rem. Feel free to change this if necessary
12) If you want the width of the dropdown content to be as wide as the dropdown button, set the width 
    to 100%. Set overflow: auto to enable scroll on small screens too!
13) On smaller screens, set the position property of the dropdown contents to its initial/default 
    value. This prevents the dropdown from overlaping the search bar
14) The dropdown menu links should be given a smaller left padding to keep them left-aligned
15) The height of the search bar is determined by the top- and bottom padding applied to the input 
    element. Apply the align-self: stretch rule to the button, so it occupies the full height of 
    the search bar

--- MOBILE NAVBAR END ---


--- FINAL POINTS ---

1) For your OWN projects, you can remove the dropdown, search bar, search bar button or search bar
    close icon (x) if you need to. However, the links and logo must always be there!
2) Feel free to modify this mobile navigation bar to suit your needs

3) The icons used are: magnifying glass, dropdown arrow (caret) & dots (3 horizontal)
4) To see what the navigation bar looks like on large ad small screen devices, look at the photos
    in the 'previews' folder under 'images'


NOTE: The JavaScript is working, but I can't get the dot icon dropdown to close when the user clicks 
      outside of it. Come back later
