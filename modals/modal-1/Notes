Important Points:


1) This contains code for building a Modal Box using CSS & JavaScript
2) The modal should be of class .modal and have a unique ID
3) The modal dialog (.modal__dialog) should be a direct child of .modal, and will hold the
   modal content 
4) The content can be almost anything you want such as text, images, lightboxes, 
   user notifications/alerts etc
5) To open the modal, use any element (normally a button) with the data-open attribute. The value of 
   this attribute should be the ID of the modal
6) By default, a modal will close if you click outside of it, or when the Esc is pressed. But you can
   also close it if you click on any element with the data-close attribute (normally a button)
7) The aria-label attribute is used to provide an accessible name
8) Initially, the modal will appear/disappear with a fade effect. But you have the ability to adjust
   the animation effect of the dialog via the data-animation attribute
9) The value of this attribute must be added to the modal (.modal), and can be any of the following:

   slideInOutDown
   slideInOutTop
   slideInOutLeft
   slideInOutRight
   zoomInOut
   rotateInOutDown
   mixInAnimations


--- MODAL STYLING START ---

1) Each modal will have the following characteristics:-

   1) It will be full-screen with a fixed position. That said, it will look like an overlay that 
      covers the entire windowâ€™s width and height
   2) It will have a dark background color
   3) It will be hidden by default
   4) The dialog will be horizontally and vertically centered

2) The width of the modal is determined by its content
3) If you ever want to set your own width, do it by adding a modifier class to .modal__dialog
4) However, there is a limit to how wide the modal can be
5) The dialog will have a maximum width (max-width) and a maximum height (max-height)
6) The max-width property is used to restrict the modal's overall width
7) If you need to, you can always set the max-width property in vw units (eg. 45vw) to make it more 
   flexible and responsive on smaller screen devices
8) Feel free to do this by adding a custom class
9) Setting the width in vw is typically best if you have a background image
10) That way, it scales beautifully when the viewport size is decreased
11) However, it's often better for modals to just have a fixed width set it in rem units
12) Therefore, for best practice, set the max-width property in rem units (eg. 80rem)
13) NOTE: Even though the max-width is set in rem units, the modal contents themselves should be 
    made responsive!
14) The max-height property is used to control the modal's overall height
15) The dialog height will be 80% of the viewport height
16) In cases where its height exceeds that value, a vertical scrollbar will appear
17) Including a header and footer is totally optional, and depends on the type of content you want in
    the modal
18) The header and footer should both have a bottom and top border, respectively. This helps to makes
    these sections distinct from the main content (.modal__content)
19) For best results, the border colour should be similar to the modal's background colour. In other
    words, the background colour set for the modal's header, body & footer


2) If you want users to be able to close the message, add a span tag to the alert
3) The span tag should contain an onclick attribute with JavaScript code to hide the message after 
   clicking on the cross (x)
4) Use the HTML "&times;" entity to create the cross (x)
5) The HTML "&times;" entity actually takes up more vertical space than it needs
6) To fix this, set the line-height property to 0 or 1. Setting line-height: 0 is preferrable,
   and what's recommended
7) For best practice, the size of the cross (x) should not be more than 2.6rem

--- MODAL STYLING END ---


--- MULTIPLE MODALS START ---

1) A page can have more than one modal, and all modals will be hidden initially
2) Similarly, a page can have more than one open triggers
3) Once again, each of these triggers should have the data-open attribute
4) Each time a trigger is clicked, the associated modal should become visible with a fade-in 
   animation
5) The value of the data-open attribute must match the ID of the corresponding modal
6) IMPORTANT: This code does not support nested modals - only a single modal can appear at a time
7) In order to close the modal, there are three methods available, all done via JavaScript:-
    
   1) By clicking on the custom [data-close] element which is located inside the modal
   2) By clicking on everything outside of the modal
   3) Lastly by pressing the Esc key

--- MULTIPLE MODALS END ---


--- REMOVING THE SCROLLBAR START ---

1) Most of the time, when modals are used, the page's scroll bars have been deactivated
2) In the CSS Reset code, the page's x-axis scroll bar has been deactivated, so it's not a problem 
    here
3) However, the y-axis scroll bar will still be visible by default
4) To get rid of it, create a modifier class (._9714--remove-scrollbar) with a single CSS rule 
   - overflow-y: hidden
5) This modifier should then be added and removed by JavaScript when the modal opens and closes

--- REMOVING THE SCROLLBAR END ---


--- ALTERNATIVE JAVASCRIPT START ---

1) There's an alternative JavaScript code which can be used instead
2) For this, you don't need to add a unique ID to the modal, and you don't need to use the data-open 
   or data-close attributes either
3) It's far simpler, and is what I'll stick with going forward


--- ALTERNATIVE JAVASCRIPT END ---


--- ADD DIALOG ANIMATIONS ---

1) The default behaviour of the modal is to fade-in and fade-out
2) However, you also have the option to set custom animations for the fade-in part
3) Using animations is totally OPTIONAL. To do it, set the animation effect of the dialog via the 
   data-animation attribute. The value of this attribute, which has to be added to the .modal class, 
   can be any of the following values:

   - slideInOutDown
   - slideInOutTop
   - slideInOutLeft
   - slideInOutRight
   - zoomInOut
   - rotateInOutDown
   - mixInAnimations


Example:-

data-animation="zoomInOut"